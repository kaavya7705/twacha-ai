import * as react_jsx_runtime from 'react/jsx-runtime';
import * as uploadthing_types from 'uploadthing/types';
import { AnyFileRoute, inferEndpointOutput, ClientUploadedFileData, inferErrorShape, FileRouter, EndpointArg, inferEndpointInput } from 'uploadthing/types';
import { ErrorMessage, MaybePromise, UploadThingError, ClassListMerger, ExtendObjectIf, StyleField, ContentField, DropzoneOptions, ExpandedRouteConfig } from '@uploadthing/shared';
import * as react from 'react';
import { HTMLProps } from 'react';

interface GenerateTypedHelpersOptions {
    /**
     * URL to the UploadThing API endpoint
     * @example "/api/uploadthing"
     * @example "https://www.example.com/api/uploadthing"
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL;
}
type UseUploadthingProps<TFileRoute extends AnyFileRoute, TServerOutput = inferEndpointOutput<TFileRoute>> = {
    /**
     * Called when the upload is submitted and the server is about to be queried for presigned URLs
     * Can be used to modify the files before they are uploaded, e.g. renaming them
     */
    onBeforeUploadBegin?: ((files: File[]) => Promise<File[]> | File[]) | undefined;
    /**
     * Called when presigned URLs have been retrieved and the file upload is about to begin
     */
    onUploadBegin?: ((fileName: string) => void) | undefined;
    /**
     * Called continuously as the file is uploaded to the storage provider
     */
    onUploadProgress?: ((p: number) => void) | undefined;
    /**
     * This option has been moved to your serverside route config.
     * Please opt-in by setting `awaitServerData: false` in your route
     * config instead.
     * ### Example
     * ```ts
     * f(
     *   { image: { maxFileSize: "1MB" } },
     *   { awaitServerData: false }
     * ).middleware(...)
     * ```
     * @deprecated
     * @see https://docs.uploadthing.com/api-reference/server#route-options
     */
    skipPolling?: ErrorMessage<"This option has been moved to your serverside route config. Please use `awaitServerData` in your route config instead.">;
    /**
     * Called when the file uploads are completed
     * @remarks If `RouteOptions.awaitServerData` is `true`, this will be
     * called after the serverside `onUploadComplete` callback has finished
     */
    onClientUploadComplete?: ((res: ClientUploadedFileData<TServerOutput>[]) => MaybePromise<void>) | undefined;
    /**
     * Called if the upload fails
     */
    onUploadError?: ((e: UploadThingError<inferErrorShape<TFileRoute>>) => MaybePromise<void>) | undefined;
    /**
     * Set custom headers that'll get sent with requests
     * to your server
     */
    headers?: HeadersInit | (() => MaybePromise<HeadersInit>) | undefined;
    /**
     * An AbortSignal to cancel the upload
     * Calling `abort()` on the parent AbortController will cause the
     * upload to throw an `UploadAbortedError`. In a future version
     * the function will not throw in favor of an `onUploadAborted` callback.
     */
    signal?: AbortSignal | undefined;
};
type UploadthingComponentProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = Omit<UseUploadthingProps<TRouter[TEndpoint]>, 
/**
 * Signal is omitted, component has its own AbortController
 * If you need to control the interruption with more granularity,
 * create your own component and pass your own signal to
 * `useUploadThing`
 * @see https://github.com/pingdotgg/uploadthing/pull/838#discussion_r1624189818
 */
"signal"> & {
    /**
     * Called when the upload is aborted
     */
    onUploadAborted?: (() => MaybePromise<void>) | undefined;
    /**
     * The endpoint from your FileRouter to use for the upload
     */
    endpoint: EndpointArg<TRouter, TEndpoint>;
    /**
     * URL to the UploadThing API endpoint
     * @example URL { /api/uploadthing }
     * @example URL { https://www.example.com/api/uploadthing }
     *
     * If relative, host will be inferred from either the `VERCEL_URL` environment variable or `window.location.origin`
     *
     * @default (VERCEL_URL ?? window.location.origin) + "/api/uploadthing"
     */
    url?: string | URL;
    config?: {
        mode?: "auto" | "manual";
        appendOnPaste?: boolean;
        /**
         * Override the default class name merger, with e.g. tailwind-merge
         * This may be required if you're customizing the component
         * appearance with additional TailwindCSS classes to ensure
         * classes are sorted and applied in the correct order
         */
        cn?: ClassListMerger;
    };
    disabled?: boolean;
    /**
     * Callback called when files are selected
     *
     * @param acceptedFiles - The files that were accepted.
     */
    onChange?: (files: File[]) => void;
} & ExtendObjectIf<inferEndpointInput<TRouter[TEndpoint]>, {
    /**
     * The input to the endpoint, as defined using `.input()` on the FileRouter endpoint
     * @see https://docs.uploadthing.com/api-reference/server#input
     */
    input: inferEndpointInput<TRouter[TEndpoint]>;
}>;

type ButtonStyleFieldCallbackArgs = {
    __runtime: "react";
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
    files: File[];
};
type ButtonAppearance = {
    container?: StyleField<ButtonStyleFieldCallbackArgs>;
    button?: StyleField<ButtonStyleFieldCallbackArgs>;
    allowedContent?: StyleField<ButtonStyleFieldCallbackArgs>;
    clearBtn?: StyleField<ButtonStyleFieldCallbackArgs>;
};
type ButtonContent = {
    button?: ContentField<ButtonStyleFieldCallbackArgs>;
    allowedContent?: ContentField<ButtonStyleFieldCallbackArgs>;
    clearBtn?: ContentField<ButtonStyleFieldCallbackArgs>;
};
type UploadButtonProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = UploadthingComponentProps<TRouter, TEndpoint> & {
    /**
     * @see https://docs.uploadthing.com/theming#style-using-the-classname-prop
     */
    className?: string;
    /**
     * @see https://docs.uploadthing.com/theming#style-using-the-appearance-prop
     */
    appearance?: ButtonAppearance;
    /**
     * @see https://docs.uploadthing.com/theming#content-customisation
     */
    content?: ButtonContent;
};
/**
 * @remarks It is not recommended using this directly as it requires manually binding generics. Instead, use `createUploadButton`.
 * @example
 * <UploadButton<OurFileRouter, "someEndpoint">
 *   endpoint="someEndpoint"
 *   onUploadComplete={(res) => console.log(res)}
 *   onUploadError={(err) => console.log(err)}
 * />
 */
declare function UploadButton<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadButtonProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;

type DropzoneStyleFieldCallbackArgs = {
    __runtime: "react";
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
    isDragActive: boolean;
    files: File[];
};
type DropzoneAppearance = {
    container?: StyleField<DropzoneStyleFieldCallbackArgs>;
    uploadIcon?: StyleField<DropzoneStyleFieldCallbackArgs>;
    label?: StyleField<DropzoneStyleFieldCallbackArgs>;
    allowedContent?: StyleField<DropzoneStyleFieldCallbackArgs>;
    button?: StyleField<DropzoneStyleFieldCallbackArgs>;
};
type DropzoneContent = {
    uploadIcon?: ContentField<DropzoneStyleFieldCallbackArgs>;
    label?: ContentField<DropzoneStyleFieldCallbackArgs>;
    allowedContent?: ContentField<DropzoneStyleFieldCallbackArgs>;
    button?: ContentField<DropzoneStyleFieldCallbackArgs>;
};
type UploadDropzoneProps<TRouter extends FileRouter, TEndpoint extends keyof TRouter> = UploadthingComponentProps<TRouter, TEndpoint> & {
    /**
     * @see https://docs.uploadthing.com/theming#style-using-the-classname-prop
     */
    className?: string;
    /**
     * @see https://docs.uploadthing.com/theming#style-using-the-appearance-prop
     */
    appearance?: DropzoneAppearance;
    /**
     * @see https://docs.uploadthing.com/theming#content-customisation
     */
    content?: DropzoneContent;
    /**
     * Callback called when files are dropped or pasted.
     *
     * @param acceptedFiles - The files that were accepted.
     * @deprecated Use `onChange` instead
     */
    onDrop?: (acceptedFiles: File[]) => void;
};
declare function UploadDropzone<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadDropzoneProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;
type DropEvent = Event | React.DragEvent<HTMLElement> | React.ChangeEvent<HTMLElement>;
/**
 * A React hook that creates a drag 'n' drop area.
 *
 * ### Example
 *
 * ```tsx
 * function MyDropzone() {
 *   const { getRootProps, getInputProps } = useDropzone({
 *     onDrop: acceptedFiles => {
 *       // do something with the File objects, e.g. upload to some server
 *     }
 *   });
 *
 *   return (
 *     <div {...getRootProps()}>
 *       <input {...getInputProps()} />
 *       <p>Drag and drop some files here, or click to select files</p>
 *     </div>
 *   )
 * }
 * ```
 */
declare function useDropzone({ accept, disabled, maxSize, minSize, multiple, maxFiles, onDrop, }: DropzoneOptions): {
    getRootProps: () => HTMLProps<HTMLDivElement>;
    getInputProps: () => HTMLProps<HTMLInputElement>;
    rootRef: react.RefObject<HTMLDivElement>;
    isFocused: boolean;
    isDragActive: boolean;
    isDragAccept: boolean;
    isDragReject: boolean;
    isFileDialogActive: boolean;
    acceptedFiles: File[];
};

declare function Uploader<TRouter extends FileRouter, TEndpoint extends keyof TRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadthingComponentProps<TRouter, TEndpoint>): react_jsx_runtime.JSX.Element;

declare const generateUploadButton: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter>(props: Omit<UploadButtonProps<TRouter, TEndpoint>, keyof GenerateTypedHelpersOptions>) => react_jsx_runtime.JSX.Element;
declare const generateUploadDropzone: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter>(props: Omit<UploadDropzoneProps<TRouter, TEndpoint>, keyof GenerateTypedHelpersOptions>) => react_jsx_runtime.JSX.Element;
declare const generateUploader: <TRouter extends FileRouter>(opts?: GenerateTypedHelpersOptions) => <TEndpoint extends keyof TRouter>(props: Omit<UploadthingComponentProps<TRouter, TEndpoint>, keyof GenerateTypedHelpersOptions>) => react_jsx_runtime.JSX.Element;

declare const generateReactHelpers: <TRouter extends FileRouter>(initOpts?: GenerateTypedHelpersOptions) => {
    /**
     * Get the config for a given endpoint outside of React context.
     * @remarks Can only be used if the NextSSRPlugin is used in the app.
     */
    readonly getRouteConfig: (slug: EndpointArg<TRouter, keyof TRouter>) => ExpandedRouteConfig;
    readonly uploadFiles: <TEndpoint extends keyof TRouter>(slug: EndpointArg<TRouter, TEndpoint>, opts: Omit<uploadthing_types.UploadFilesOptions<TRouter[TEndpoint]>, keyof uploadthing_types.GenerateUploaderOptions>) => Promise<uploadthing_types.ClientUploadedFileData<uploadthing_types.inferEndpointOutput<TRouter[TEndpoint]>>[]>;
    readonly createUpload: <TEndpoint extends keyof TRouter, TServerOutput = uploadthing_types.inferEndpointOutput<TRouter[TEndpoint]>>(slug: EndpointArg<TRouter, TEndpoint>, opts: Omit<uploadthing_types.CreateUploadOptions<TRouter[TEndpoint]>, keyof uploadthing_types.GenerateUploaderOptions>) => Promise<{
        pauseUpload: (file?: File) => void;
        resumeUpload: (file?: File) => void;
        done: <T extends File | void = void>(file?: T | undefined) => Promise<T extends File ? uploadthing_types.ClientUploadedFileData<TServerOutput> : uploadthing_types.ClientUploadedFileData<TServerOutput>[]>;
    }>;
    readonly routeRegistry: uploadthing_types.RouteRegistry<TRouter>;
    readonly useUploadThing: <TEndpoint extends keyof TRouter>(endpoint: EndpointArg<TRouter, TEndpoint>, opts?: UseUploadthingProps<TRouter[TEndpoint]>) => {
        readonly startUpload: (...args: undefined extends inferEndpointInput<TRouter[TEndpoint]> ? [files: File[], input?: inferEndpointInput<TRouter[TEndpoint]> & undefined] : [files: File[], input: inferEndpointInput<TRouter[TEndpoint]>]) => Promise<uploadthing_types.ClientUploadedFileData<uploadthing_types.inferEndpointOutput<TRouter[TEndpoint]>>[] | undefined>;
        readonly isUploading: boolean;
        readonly routeConfig: ExpandedRouteConfig | undefined;
    };
};

export { type DropEvent, type GenerateTypedHelpersOptions, UploadButton, UploadDropzone, type UploadDropzoneProps, Uploader, type UploadthingComponentProps, type UseUploadthingProps, generateReactHelpers, generateUploadButton, generateUploadDropzone, generateUploader, useDropzone };
